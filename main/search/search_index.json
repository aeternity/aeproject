{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quick Start Requirements In order to have AEproject working you must have installed the following: nodejs >= 14 docker Note: on windows WSL 2 must be used Install npm install -g @aeternity/aeproject Init a project aeproject init [folder] This will create the project scaffold with an example contract including tests as well as a sample deployment script inside the specified folder. If no folder is specified the artifacts will be initialized in the current directory. Further explained in Initialization Documentation . Running a local environment aeproject env This will run a local \u00e6ternity network in dev-mode (node, compiler and nginx-proxy). To stop an already spawned local environment use aeproject env --stop Further explained in Environment Documentation . Testing aeproject test This will run the tests located in ./test folder. Further explained in Testing Documentation . Help aeproject help Run this command to give you all possible commands of aeproject with help and info Version aeproject --version Running this command will give you the current installed aeproject version","title":"Quick Start"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#requirements","text":"In order to have AEproject working you must have installed the following: nodejs >= 14 docker Note: on windows WSL 2 must be used","title":"Requirements"},{"location":"#install","text":"npm install -g @aeternity/aeproject","title":"Install"},{"location":"#init-a-project","text":"aeproject init [folder] This will create the project scaffold with an example contract including tests as well as a sample deployment script inside the specified folder. If no folder is specified the artifacts will be initialized in the current directory. Further explained in Initialization Documentation .","title":"Init a project"},{"location":"#running-a-local-environment","text":"aeproject env This will run a local \u00e6ternity network in dev-mode (node, compiler and nginx-proxy). To stop an already spawned local environment use aeproject env --stop Further explained in Environment Documentation .","title":"Running a local environment"},{"location":"#testing","text":"aeproject test This will run the tests located in ./test folder. Further explained in Testing Documentation .","title":"Testing"},{"location":"#help","text":"aeproject help Run this command to give you all possible commands of aeproject with help and info","title":"Help"},{"location":"#version","text":"aeproject --version Running this command will give you the current installed aeproject version","title":"Version"},{"location":"lib/","text":"AEproject Library Installed automatically with each project initialized with aeproject init , otherwise can be installed using npm i @aeternity/aeproject . Available imports include helper definitions and utils using: const { utils , wallets , networks } = require ( '@aeternity/aeproject' ); Utils utils . getContractContent ( contractPath ); Read the contract source from given path, just a wrapper for fs.readFileSync using utf-8 encoding. utils . getFilesystem ( contractPath ); Add the required filesystem imports for contract from given path, excluding the Sophia provided library imports. utils . get ( url ); Promisified zero dependencies http GET request, usually used to control \u00e6ternity node devmode endpoints. utils . getSdk (); Initialize the \u00e6ternity SDK, pre-configured for optimal use in an AEproject project using \u00e6ternity node devmode. utils . awaitKeyBlocks ( aeSdk , n ); Create and wait for n number of key-blocks with the \u00e6ternity node devmode, checked using the passed aeSdk . utils . createSnapshot ( aeSdk ); Create a snapshot of the current chain state using the \u00e6ternity node devmode, using the passed aeSdk . utils . rollbackSnapshot ( aeSdk ); Rollback to the latest snapshot using the \u00e6ternity node devmode, using the passed aeSdk . utils . getDefaultAccounts (); Get the pre-funded default accounts as MemoryAccount , so they can be used natively using the aeSdk . Wallets List of configured keypairs that are pre-funded using the \u00e6ternity node devmode as provided in AEproject. Networks Exposed URLs for commonly used nodeUrl and compilerUrl , per default local devmode and optionally hosted URLs for mainnet and testnet .","title":"AEproject Library"},{"location":"lib/#aeproject-library","text":"Installed automatically with each project initialized with aeproject init , otherwise can be installed using npm i @aeternity/aeproject . Available imports include helper definitions and utils using: const { utils , wallets , networks } = require ( '@aeternity/aeproject' );","title":"AEproject Library"},{"location":"lib/#utils","text":"utils . getContractContent ( contractPath ); Read the contract source from given path, just a wrapper for fs.readFileSync using utf-8 encoding. utils . getFilesystem ( contractPath ); Add the required filesystem imports for contract from given path, excluding the Sophia provided library imports. utils . get ( url ); Promisified zero dependencies http GET request, usually used to control \u00e6ternity node devmode endpoints. utils . getSdk (); Initialize the \u00e6ternity SDK, pre-configured for optimal use in an AEproject project using \u00e6ternity node devmode. utils . awaitKeyBlocks ( aeSdk , n ); Create and wait for n number of key-blocks with the \u00e6ternity node devmode, checked using the passed aeSdk . utils . createSnapshot ( aeSdk ); Create a snapshot of the current chain state using the \u00e6ternity node devmode, using the passed aeSdk . utils . rollbackSnapshot ( aeSdk ); Rollback to the latest snapshot using the \u00e6ternity node devmode, using the passed aeSdk . utils . getDefaultAccounts (); Get the pre-funded default accounts as MemoryAccount , so they can be used natively using the aeSdk .","title":"Utils"},{"location":"lib/#wallets","text":"List of configured keypairs that are pre-funded using the \u00e6ternity node devmode as provided in AEproject.","title":"Wallets"},{"location":"lib/#networks","text":"Exposed URLs for commonly used nodeUrl and compilerUrl , per default local devmode and optionally hosted URLs for mainnet and testnet .","title":"Networks"},{"location":"migration-from-3.x.x-to-4.x.x/","text":"Migration from 3.x.x to 4.x.x Changes AEproject v4.0.0 underwent some bigger changes, is now available as official package of the \u00e6ternity organization on NPM and is compatible to the recently published node v6.4.0 . Install the new AEproject version npm install -g @aeternity/aeproject Removed commands Following commands have been removed and cannot be used anymore. Most of them didn't work properly or aren't used by anyone: aeproject compatibility (discontinued) aeproject compile manual compilation isn't needed for use of aeproject, alternatively use the CLI or the SDK programmatically aeproject deploy deployment isn't supported in aeproject anymore, alternatively use the CLI or the SDK programmatically aeproject export (discontinued) aeproject tx-inspector manual tx inspection is moved to the CLI Updated commands aeproject init added the folder argument to create a new folder for the project initialization Project structure The latest available node and compiler will always be used with starting the testing environment. Testing is now handled locally in the project using mocha and chai as direct dev dependencies. @aeternity/aeproject is added itself as dependency and includes some library-functions that can be used in testing. const { networks , utils , wallets } = require ( '@aeternity/aeproject' ); networks includes network definitions for local development, testnet and mainnet wallets includes example wallets that are prefunded in local development utils includes helper functions for testing getFilesystem(source) to get the filesystem definition for a given contract for deployment getSdk() get an instance of the SDK for local development initialized with all prefunded wallets for onAccount to be used calling from different accounts awaitKeyBlocks(aeSdk, number) await a certain number of key-blocks createSnapshot(aeSdk) create a snapshot for local testing rollbackSnapshot(aeSdk) rollback to previously created snapshot in local testing Instructions Upgrade your project aeproject init --update adds new files needed including new example contract and tests prompts for files to replaced docker setup for the node, compiler dev-mode setup should be accepted example contract and example tests should not be accepted if used in your project for testing automatically installs needed dependencies and removes unnecessary ones Adapt Testing Setup (compare your tests with test/exampleTest.js ) to include const { assert } = require('chai'); for assertions replace NETWORKS import with const { networks } = require('@aeternity/aeproject'); for networks definition local testing network is now devmode instead of local replace defaultWallets import with const { wallets } = require('@aeternity/aeproject'); for prefunded wallets replace contractUtils import with const { utils } = require('@aeternity/aeproject'); for utils consider using the new helpers for initializing an instance of the SDK and creating snapshots similar to test/exampleTest.js","title":"Migration from 3.x.x to 4.x.x"},{"location":"migration-from-3.x.x-to-4.x.x/#migration-from-3xx-to-4xx","text":"","title":"Migration from 3.x.x to 4.x.x"},{"location":"migration-from-3.x.x-to-4.x.x/#changes","text":"AEproject v4.0.0 underwent some bigger changes, is now available as official package of the \u00e6ternity organization on NPM and is compatible to the recently published node v6.4.0 . Install the new AEproject version npm install -g @aeternity/aeproject","title":"Changes"},{"location":"migration-from-3.x.x-to-4.x.x/#removed-commands","text":"Following commands have been removed and cannot be used anymore. Most of them didn't work properly or aren't used by anyone: aeproject compatibility (discontinued) aeproject compile manual compilation isn't needed for use of aeproject, alternatively use the CLI or the SDK programmatically aeproject deploy deployment isn't supported in aeproject anymore, alternatively use the CLI or the SDK programmatically aeproject export (discontinued) aeproject tx-inspector manual tx inspection is moved to the CLI","title":"Removed commands"},{"location":"migration-from-3.x.x-to-4.x.x/#updated-commands","text":"aeproject init added the folder argument to create a new folder for the project initialization","title":"Updated commands"},{"location":"migration-from-3.x.x-to-4.x.x/#project-structure","text":"The latest available node and compiler will always be used with starting the testing environment. Testing is now handled locally in the project using mocha and chai as direct dev dependencies. @aeternity/aeproject is added itself as dependency and includes some library-functions that can be used in testing. const { networks , utils , wallets } = require ( '@aeternity/aeproject' ); networks includes network definitions for local development, testnet and mainnet wallets includes example wallets that are prefunded in local development utils includes helper functions for testing getFilesystem(source) to get the filesystem definition for a given contract for deployment getSdk() get an instance of the SDK for local development initialized with all prefunded wallets for onAccount to be used calling from different accounts awaitKeyBlocks(aeSdk, number) await a certain number of key-blocks createSnapshot(aeSdk) create a snapshot for local testing rollbackSnapshot(aeSdk) rollback to previously created snapshot in local testing","title":"Project structure"},{"location":"migration-from-3.x.x-to-4.x.x/#instructions","text":"Upgrade your project aeproject init --update adds new files needed including new example contract and tests prompts for files to replaced docker setup for the node, compiler dev-mode setup should be accepted example contract and example tests should not be accepted if used in your project for testing automatically installs needed dependencies and removes unnecessary ones Adapt Testing Setup (compare your tests with test/exampleTest.js ) to include const { assert } = require('chai'); for assertions replace NETWORKS import with const { networks } = require('@aeternity/aeproject'); for networks definition local testing network is now devmode instead of local replace defaultWallets import with const { wallets } = require('@aeternity/aeproject'); for prefunded wallets replace contractUtils import with const { utils } = require('@aeternity/aeproject'); for utils consider using the new helpers for initializing an instance of the SDK and creating snapshots similar to test/exampleTest.js","title":"Instructions"},{"location":"cli/env/","text":"Local Environment aeproject env The command is responsible for setting up a healthy local environment. The env command helps developers run a local node and a local compiler in dev-mode using docker. To spawn a fully functional environment it can take a couple of minutes depending on your system. If using Windows, WSL 2 needs to be used for AEproject to work normally, see https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers You can stop both the node and the compiler by running aeproject env --stop There are optional parameters --nodeVersion and --compilerVersion . To specify a specific version of node or compiler, or both aeproject env --nodeVersion v6.4.0 # or aeproject env --compilerVersion v6.1.0 # or aeproject env --nodeVersion v6.4.0 --compilerVersion v6.1.0 This also applies to the commands aeproject node and aeproject compiler . To see whether you have running instances of the nodes along with a compiler you could run the following command aeproject env --info Note : By default AEproject uses the latest-bundle tag of the official docker images . Disclaimer Firewalls and any other security feature can block your docker/docker-compose requests. Please check that docker/docker-compose is NOT in its blocked list or has permission to make requests.","title":"Local Environment"},{"location":"cli/env/#local-environment","text":"aeproject env The command is responsible for setting up a healthy local environment. The env command helps developers run a local node and a local compiler in dev-mode using docker. To spawn a fully functional environment it can take a couple of minutes depending on your system. If using Windows, WSL 2 needs to be used for AEproject to work normally, see https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers You can stop both the node and the compiler by running aeproject env --stop There are optional parameters --nodeVersion and --compilerVersion . To specify a specific version of node or compiler, or both aeproject env --nodeVersion v6.4.0 # or aeproject env --compilerVersion v6.1.0 # or aeproject env --nodeVersion v6.4.0 --compilerVersion v6.1.0 This also applies to the commands aeproject node and aeproject compiler . To see whether you have running instances of the nodes along with a compiler you could run the following command aeproject env --info Note : By default AEproject uses the latest-bundle tag of the official docker images .","title":"Local Environment"},{"location":"cli/env/#disclaimer","text":"Firewalls and any other security feature can block your docker/docker-compose requests. Please check that docker/docker-compose is NOT in its blocked list or has permission to make requests.","title":"Disclaimer"},{"location":"cli/init/","text":"Project Initialization aeproject init [folder] Optionally a folder can be specified for the project to be initialized in, otherwise the current directory is used. Creates a new project structure with a few folders in which the developer can create contracts and tests , as well as installing needed dependencies. Update existing project For upgrade from old AEproject versions check out Migration from 3.x.x to 4.x.x . aeproject init --update Updates the project structure and needed artifacts to the latest version, as well as installing needed dependencies.","title":"Project Initialization"},{"location":"cli/init/#project-initialization","text":"aeproject init [folder] Optionally a folder can be specified for the project to be initialized in, otherwise the current directory is used. Creates a new project structure with a few folders in which the developer can create contracts and tests , as well as installing needed dependencies.","title":"Project Initialization"},{"location":"cli/init/#update-existing-project","text":"For upgrade from old AEproject versions check out Migration from 3.x.x to 4.x.x . aeproject init --update Updates the project structure and needed artifacts to the latest version, as well as installing needed dependencies.","title":"Update existing project"},{"location":"cli/test/","text":"Unit Testing Run unit tests aeproject test The test command helps developers run their unit tests for \u00e6ternity projects. The command executes the tests scripts that are located in the test folder of your \u00e6ternity project. Implement unit tests In the test/exampleTest.js file you can find an example for unit testing using AEproject. 1. Dependencies Javascript testing framework used with mocha for assertions, documented at https://www.chaijs.com/api/assert/ const { assert } = require ( 'chai' ); Helper and utilities for AEproject use, e.g. prefunded wallets, network definition and utility functions for SDK initialization and snapshotting. const { networks , utils , wallets } = require ( '@aeternity/aeproject' ); Read AEproject Library for a more detailed explanation about the usage of these imports. 2. SDK and Snapshotting Setup Provide your initializations in mocha which need to be done once before all tests: before (...) Initialize the default SDK instance with provided utils: const aeSdk = await utils . getSdk (); Get the filesystem definition for (custom) includes of the given contract: const filesystem = utils . getFilesystem ( EXAMPLE_CONTRACT_SOURCE ); Read the contract source from the filesystem: const source = utils . getContractContent ( EXAMPLE_CONTRACT_SOURCE ); Initialize the contract instance: const contract = await aeSdk . getContractInstance ({ source , filesystem }); Deploy the contract: await contract . deploy (); Create a snapshot of the chain state once before all tests. This allows you to rollback to a clean state after each test if needed: await utils . createSnapshot ( aeSdk ); Rollback to the previously created snapshot after each test for a clean state in the following tests: afterEach ( async () => { await utils . rollbackSnapshot ( aeSdk ); }); 3. Example Test it ( 'ExampleContract: set and get' , async () => { const set = await contract . methods . set ( 42 , { onAccount : wallets [ 1 ]. publicKey }); assert . equal ( set . decodedEvents [ 0 ]. name , 'SetXEvent' ); assert . equal ( set . decodedEvents [ 0 ]. decoded [ 0 ], wallets [ 1 ]. publicKey ); assert . equal ( set . decodedEvents [ 0 ]. decoded [ 1 ], 42 ); const { decodedResult } = await contract . methods . get (); assert . equal ( decodedResult , 42 ); }); Use mocha for test setup and chai for assert . Then implement contract usage using the aeternity sdk as explained in the guide at https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/guides/contracts.md#5-call-contract-entrypoints","title":"Unit Testing"},{"location":"cli/test/#unit-testing","text":"","title":"Unit Testing"},{"location":"cli/test/#run-unit-tests","text":"aeproject test The test command helps developers run their unit tests for \u00e6ternity projects. The command executes the tests scripts that are located in the test folder of your \u00e6ternity project.","title":"Run unit tests"},{"location":"cli/test/#implement-unit-tests","text":"In the test/exampleTest.js file you can find an example for unit testing using AEproject.","title":"Implement unit tests"},{"location":"cli/test/#1-dependencies","text":"Javascript testing framework used with mocha for assertions, documented at https://www.chaijs.com/api/assert/ const { assert } = require ( 'chai' ); Helper and utilities for AEproject use, e.g. prefunded wallets, network definition and utility functions for SDK initialization and snapshotting. const { networks , utils , wallets } = require ( '@aeternity/aeproject' ); Read AEproject Library for a more detailed explanation about the usage of these imports.","title":"1. Dependencies"},{"location":"cli/test/#2-sdk-and-snapshotting-setup","text":"Provide your initializations in mocha which need to be done once before all tests: before (...) Initialize the default SDK instance with provided utils: const aeSdk = await utils . getSdk (); Get the filesystem definition for (custom) includes of the given contract: const filesystem = utils . getFilesystem ( EXAMPLE_CONTRACT_SOURCE ); Read the contract source from the filesystem: const source = utils . getContractContent ( EXAMPLE_CONTRACT_SOURCE ); Initialize the contract instance: const contract = await aeSdk . getContractInstance ({ source , filesystem }); Deploy the contract: await contract . deploy (); Create a snapshot of the chain state once before all tests. This allows you to rollback to a clean state after each test if needed: await utils . createSnapshot ( aeSdk ); Rollback to the previously created snapshot after each test for a clean state in the following tests: afterEach ( async () => { await utils . rollbackSnapshot ( aeSdk ); });","title":"2. SDK and Snapshotting Setup"},{"location":"cli/test/#3-example-test","text":"it ( 'ExampleContract: set and get' , async () => { const set = await contract . methods . set ( 42 , { onAccount : wallets [ 1 ]. publicKey }); assert . equal ( set . decodedEvents [ 0 ]. name , 'SetXEvent' ); assert . equal ( set . decodedEvents [ 0 ]. decoded [ 0 ], wallets [ 1 ]. publicKey ); assert . equal ( set . decodedEvents [ 0 ]. decoded [ 1 ], 42 ); const { decodedResult } = await contract . methods . get (); assert . equal ( decodedResult , 42 ); }); Use mocha for test setup and chai for assert . Then implement contract usage using the aeternity sdk as explained in the guide at https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/guides/contracts.md#5-call-contract-entrypoints","title":"3. Example Test"}]}